ggplot(df_dist, aes(x = lever, y= np, group = lever_type)) +
facet_grid (. ~ block , scales = "free_y") +
geom_abline(intercept = 0, slope = 1)+
geom_point(color= "black", aes(fill= lever_type),  size=4, shape= 21) +
scale_fill_manual(values= c("#ff4747","#00abd6")) +
scale_y_continuous (name= 'Food-well entries', limits = c(min_y_limit, max_y_limit))  +
scale_x_continuous (name=  'Lever presses', limits = c(min_y_limit, max_y_limit)) +
ggtitle('Distribution behaviour') +
theme_bw()+
my_theme
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
p<- ggplot(df_dist, aes(x = lever, y= np, group = lever_type)) +
facet_grid (. ~ block , scales = "free_y") +
geom_abline(intercept = 0, slope = 1)+
geom_point(color= "black", aes(fill= lever_type),  size=4, shape= 21) +
scale_fill_manual(values= c("#ff4747","#00abd6")) +
scale_y_continuous (name= 'Food-well entries', limits = c(min_y_limit, max_y_limit))  +
scale_x_continuous (name=  'Lever presses', limits = c(min_y_limit, max_y_limit)) +
ggtitle('Distribution behaviour') +
theme_bw()+
my_theme
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 14,
height = 8,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 14,
height = 8,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 14,
height = 6,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 14,
height = 4,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 16,
height = 4,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
View(df_dist)
setwd("~/OneDrive - Cardiff University/University/Experiments/2020/HDI_002/Rcode/training")
source("../load_packages.R")
se <- function(x) sqrt(var(x)/length(x))
####################################################################################################################
#Training
#Importing all the files and merging them into a list
rats<- read.csv("../../rats.csv")
names(rats)<- c('rat', 'room', 'box', 'session', 'group')
filenames <- list.files (path="../../data/csv_raw/",
pattern=".*csv")
#Create list of data frame names without the ".csv" part
names <-gsub(pattern=".csv", replacement = "", filenames)
#Load all files
for(i in names){
filepath <- file.path("../../data/csv_raw/",paste (i,".csv",sep=""))
assign(i, read.csv(paste(filepath)))
}
# Add days
list_all<- list(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
#Create totals
create_totals <- function (df) {
df<- df[, c(5:32, 34:45)]
df<- as.data.frame(df)
df<- df %>% mutate(np_cs_c_total = np_cs_c_y ,
np_cs_p_total = np_cs_p_y + np_cs_p_n,
np_twar_c_total = np_twar_c_y,
np_twar_p_total = np_twar_p_y +  np_twar_p_n,
lever_cs_c_total = lever_cs_c_y ,
lever_cs_p_total = lever_cs_p_y + lever_cs_p_n,
lever_twar_c_total = lever_twar_c_y,
lever_twar_p_total = lever_twar_p_y +  lever_twar_p_n,
np_latency_c_total = np_latency_c_y,
np_latency_p_total = np_latency_p_y +  np_latency_p_n,
lever_latency_c_total = lever_latency_c_y,
lever_latency_p_total = lever_latency_p_y +  lever_latency_p_n)
} # create_totals (function)
list_all <- lapply(list_all, create_totals)
column_names<- c("T1", "T2", "T3" ,"T4","T5" ,"T6" ,"T7","T8" , "T9" ,"T10" ,"T11")
# c( ,"T12")
create_variable <- function (df, variable) {
# Selects a variable, using the variable name, from a list containing several lists with the same column names
## df             any list containing other lists with the same number of rows
## variable       the variable that needs subsetting, using "".
## colNames       calls to a vector of strings that has to be predefined beforehand
x <- lapply(df, `[[`, variable)
x <- as.data.frame(x)
n <- max(sapply(x, length))
x <- lapply(x, function(x) if(length(x) < n) c(x, rep(NA, n - length(x))) else x)
x <- do.call(cbind, x)
x <- as.data.frame(x)
x <- setNames(x, column_names)
x <- cbind(rats, x)
}
#NP
np_cs_c_total <-  create_variable(list_all, "np_cs_c_total")
np_cs_p_total <-  create_variable(list_all, "np_cs_p_total")
np_twar_c_total <-  create_variable(list_all, "np_twar_c_total")
np_twar_p_total <-  create_variable(list_all, "np_twar_p_total")
np_latency_c_total <-  create_variable(list_all, "np_latency_c_total")
np_latency_p_total <-  create_variable(list_all, "np_latency_p_total")
#lever
lever_cs_c_total <-  create_variable(list_all, "lever_cs_c_total")
lever_cs_p_total <-  create_variable(list_all, "lever_cs_p_total")
lever_twar_c_total <-  create_variable(list_all, "lever_twar_c_total")
lever_twar_p_total <-  create_variable(list_all, "lever_twar_p_total")
lever_latency_c_total <-  create_variable(list_all, "lever_latency_c_total")
lever_latency_p_total <-  create_variable(list_all, "lever_latency_p_total")
to_long<- function (df, response, response_category, lever_type) {
# Function for transforming the data frame from wide to long format using the rats dataset that contains all the grouping information
## libraries needed: tidyr
## df         the dataframe to transform
## varName    the name to be assigned to the new variable
## leverType  "YN" for the reinforced lever during training, and non-reinforced during reversal, or "NY" for the
##            non-reinforced lever during training and reinforced during reversal
n <- nrow(df)
df$response<- rep(response, n)
df$response_category<- rep(response_category, n)
df$lever_type<- rep(lever_type, n)
long <- as.data.frame(gather(df, block, value, -rat, -room, -box, -session, -group,  -response, -response_category, -lever_type))
}
#NP
np_cs_c_total_long <-  to_long(np_cs_c_total, "np_cs_c_total", 'np', 'continuous')
np_cs_p_total_long <-  to_long(np_cs_p_total, "np_cs_p_total", 'np', 'partial')
np_twar_c_total_long <-  to_long(np_twar_c_total, "np_twar_c_total", 'np_twar', 'continuous')
np_twar_p_total_long <-  to_long(np_twar_p_total, "np_twar_p_total", 'np_twar', 'partial')
np_latency_c_total_long <-  to_long(np_latency_c_total, "np_latency_c_total", 'np_latency', 'continuous')
np_latency_p_total_long <-  to_long(np_latency_p_total, "np_latency_p_total", 'np_latency', 'partial')
#Lever
#NP
lever_cs_c_total_long <-  to_long(lever_cs_c_total, "lever_cs_c_total", 'lever', 'continuous')
lever_cs_p_total_long <-  to_long(lever_cs_p_total, "lever_cs_p_total", 'lever', 'partial')
lever_twar_c_total_long <-  to_long(lever_twar_c_total, "lever_twar_c_total", 'lever_twar', 'continuous')
lever_twar_p_total_long <-  to_long(lever_twar_p_total, "lever_twar_p_total", 'lever_twar', 'partial')
lever_latency_c_total_long <-  to_long(lever_latency_c_total, "lever_latency_c_total", 'lever_latency', 'continuous')
lever_latency_p_total_long <-  to_long(lever_latency_p_total, "lever_latency_p_total", 'lever_latency', 'partial')
df<- rbind(np_cs_c_total_long,np_cs_p_total_long,
np_twar_c_total_long, np_twar_p_total_long,
np_latency_c_total_long, np_latency_p_total_long,
lever_cs_c_total_long, lever_cs_p_total_long,
lever_twar_c_total_long, lever_twar_p_total_long,
lever_latency_c_total_long, lever_latency_p_total_long)
write.csv(df, "../../data/csv_processed/df.csv", row.names = FALSE)
source('../load_packages.R')
source('../my_theme.R')
blocks<- c("T1", "T2" ,"T3", "T4", "T5", "T6", "T7" , "T8", "T9", "T10", "T11")
#,  "T12")
se <- function(x) sqrt(var(x)/length(x))
df<- read.csv("../../data/csv_processed/df.csv")
df$block<- ordered (df$block, levels = blocks)
summary <- df%>% group_by(block, response_category, lever_type) %>% summarise (avg=mean(value), sd= sd(value), se= se(value))
write.csv(summary, 'summary.csv', row.names = FALSE)
df<- merge.data.frame(df, summary)
#Limits y axis
decide_max_y_limit<- function (y_vector) {
max_y<- as.numeric(max(y_vector))
max_y<- round((1.5* max_y),1)
return(max_y)
}
decide_min_y_limit<- function (y_vector) {
min_y <- as.numeric(min(y_vector))
if (y_vector < 0){
min_y<- round((1.5 * min_y),1)
} else {
min_y<- ((1.5 * min_y) - min_y)
}
return(min_y)
}
max_y_limit<- decide_max_y_limit(df$avg)
min_y_limit<- decide_min_y_limit(df$avg)
###################################################################
#Responses
df_responses<-  df[df$response_category %in% c('lever', 'np'), ]
max_y_limit<- decide_max_y_limit(df_responses$avg)
min_y_limit<- decide_min_y_limit(df_responses$avg)
# Lever
df_lever<- df_responses[df_responses$response_category == 'lever', ]
a<- ggplot(df_lever, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Lever presses'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Lever presses') +
theme_bw()+
my_theme
# NP
df_np<- df_responses[df_responses$response_category == 'np', ]
b<- ggplot(df_np, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Magazine entries'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Magazine entries') +
theme_bw()+
my_theme
p <- plot_grid(NULL,
a+ theme(legend.position = "none"),
b+ theme(legend.position = "none"),
align = 'hv',
labels = c(" ", "A", "B"),
hjust = -1,
ncol=1,
nrow = 4,
rel_heights = c(0.3, 1,1, 0.3))
legend_a<- get_legend(a)
p<- p+ draw_label(label= 'Conditioned responses', x= 0.5 ,y=0.9, color =  "#d73925", size= 16)
p<- p+ draw_grob(legend_a,  x= 0, y= -0.45 )
ggsave(
path = '../../plots',
filename = 'Responses.png',
plot = p,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
###################################################################
# TWAR
df_twar<-  df[df$response_category %in% c('lever_twar', 'np_twar'), ]
max_y_limit<- decide_max_y_limit(df_twar$avg)
min_y_limit<- decide_min_y_limit(df_twar$avg)
# Lever
df_lever_twar<- df_twar[df_twar$response_category == 'lever_twar', ]
a<- ggplot(df_lever_twar, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Total trials with a response'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Lever presses') +
theme_bw()+
my_theme
# NP
df_np_twar<- df_twar[df_twar$response_category == 'np_twar', ]
b<- ggplot(df_np_twar, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Total  trials with a response'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Magazine entries') +
theme_bw()+
my_theme
p <- plot_grid(NULL,
a+ theme(legend.position = "none"),
b+ theme(legend.position = "none"),
align = 'hv',
labels = c(" ", "A", "B"),
hjust = -1,
ncol=1,
nrow = 4,
rel_heights = c(0.3, 1,1, 0.3))
legend_a<- get_legend(a)
p<- p+ draw_label(label= 'TWAR (trials with a response)', x= 0.5 ,y=0.9, color =  "#d73925", size= 16)
p<- p+ draw_grob(legend_a,  x= 0, y= -0.45 )
ggsave(
path = '../../plots',
filename = 'TWAR.png',
plot = p,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
###################################################################
# Latencu
df_latency<-  df[df$response_category %in% c('lever_latency', 'np_latency'), ]
max_y_limit<- decide_max_y_limit(df_latency$avg)
min_y_limit<- decide_min_y_limit(df_latency$avg)
# Lever
df_lever_latency<- df_latency[df_latency$response_category == 'lever_latency', ]
a<- ggplot(df_lever_latency, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Latency to first response (ms)'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Lever presses') +
theme_bw()+
my_theme
# NP
df_np_latency<- df_latency[df_latency$response_category == 'np_latency', ]
b<- ggplot(df_np_latency, aes(x= factor(block), y= avg, group= factor(lever_type)))+
geom_line(size= 1, aes(color= lever_type), linetype = 'solid')+
geom_point(size= 3, color= '#000000', shape= 21, aes( fill= lever_type))+
scale_color_manual(values= c("#ff4747","#00abd6"))+
scale_fill_manual(values=  c("#ff4747","#00abd6"))+
scale_y_continuous (name= expression('Latency to first response (ms)'), limits = c(min_y_limit, max_y_limit)) +
scale_x_discrete(name= "Training") +
ggtitle('Magazine entries') +
theme_bw()+
my_theme
p <- plot_grid(NULL,
a+ theme(legend.position = "none"),
b+ theme(legend.position = "none"),
align = 'hv',
labels = c(" ", "A", "B"),
hjust = -1,
ncol=1,
nrow = 4,
rel_heights = c(0.3, 1,1, 0.3))
legend_a<- get_legend(a)
p<- p+ draw_label(label= 'Latency to response', x= 0.5 ,y=0.9, color =  "#d73925", size= 16)
p<- p+ draw_grob(legend_a,  x= 0, y= -0.45 )
ggsave(
path = '../../plots',
filename = 'Latency.png',
plot = p,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
#Responses
df<- read.csv("../../data/csv_processed/df.csv")
df$block<- ordered (df$block, levels = blocks)
df_lever<- df[df$response_category == 'lever', ]
df_np<- df[df$response_category == 'np', ]
lever<- df_lever$value
np<- df_np$value
df_dist<-  cbind.data.frame(df_lever[, 1:9], lever, np)
max_y_limit<- decide_max_y_limit(df$value)
min_y_limit<- decide_min_y_limit(df$value)
p<- ggplot(df_dist, aes(x = lever, y= np, group = lever_type)) +
facet_grid (. ~ block , scales = "free_y") +
geom_abline(intercept = 0, slope = 1)+
geom_point(color= "black", aes(fill= lever_type),  size=4, shape= 21) +
scale_fill_manual(values= c("#ff4747","#00abd6")) +
scale_y_continuous (name= 'Food-well entries', limits = c(min_y_limit, max_y_limit))  +
scale_x_continuous (name=  'Lever presses', limits = c(min_y_limit, max_y_limit)) +
ggtitle('Distribution behaviour') +
theme_bw()+
my_theme
ggsave(
path = '../../plots',
filename = 'Distribution.png',
plot = p,
width = 16,
height = 4,
device = NULL,
scale = 1,
units = "in",
dpi = 300,
limitsize = TRUE
)
shiny::runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
shiny::runApp()
runApp()
runApp()
runApp()
runApp('phenomena/rel_val')
runApp()
runApp()
runApp('phenomena/rel_val')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('phenomena/downshift_unblk')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('phenomena/rel_val')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('phenomena/comp_cond')
runApp('~/OneDrive - Cardiff University/University/HeiDI/Modelling/HeiDI_app/app')
runApp()
runApp()
runApp()
setwd("~/OneDrive - Cardiff University/University/HeiDI/Modelling/Modelling/standalone_simulations/Relative validity")
# List of required packages (packages that are not installed will be in automatically installed
list.of.packages <- c("tidyverse", "grid", "gridExtra", "cowplot")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
